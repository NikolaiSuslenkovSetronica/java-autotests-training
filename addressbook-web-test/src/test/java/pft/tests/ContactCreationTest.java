package pft.tests;// Generated by Selenium IDE

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import pft.model.ContactData;
import pft.model.Contacts;
import pft.model.GroupData;
import pft.model.Groups;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.MatcherAssert.assertThat;

public class ContactCreationTest extends TestBase {

  @DataProvider
  public Iterator<Object[]> validContactJson() throws IOException {
    try (BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/contacts.json"))) {
      String json = "";
      String line = reader.readLine();
      while (line != null) {
        json += line;
        line = reader.readLine();
      }
      Gson gson = new Gson();
      List<ContactData> contacts = gson.fromJson(json, new TypeToken<List<ContactData>>(){}.getType());  //"new TypeToken<List<GroupData>>(){}.getType()" = List<GroupData>.class
      return contacts.stream().map(g -> new Object[]{g}).toList().iterator();
    }
  }

  @Test(dataProvider = "validContactJson")
  public void testContactCreation(ContactData contact) {
    app.goTo().homePage();
    Contacts before = app.db().contacts();
    app.contact().create(contact);
    assertThat(app.contact().count(), equalTo(before.size() + 1));
    Contacts after = app.db().contacts();
    int newElementId = after.stream().mapToInt(ContactData::getId).max().getAsInt();
    contact.setId(newElementId);
    assertThat(after, equalTo(before.withAdded(contact)));
  }

  @Test(dataProvider = "validContactJson")
  public void testContactCreationWithGroup(ContactData contact) {
    Groups groups = app.db().groups();
    if (groups.size() == 0) {
      app.goTo().groupPage();
      app.group().create(new GroupData(0, "group 0", "header 0", "footer 0"));
      groups = app.db().groups();
    }
    if (contact.getGroups().size() == 0) {
      contact.inGroup(groups.iterator().next());
    }
    Contacts before = app.db().contacts();
    app.goTo().homePage();
    app.contact().create(contact);
    assertThat(app.contact().count(), equalTo(before.size() + 1));
    Contacts after = app.db().contacts();
    int newElementId = after.stream().mapToInt(ContactData::getId).max().getAsInt();
    contact.setId(newElementId);
    assertThat(after, equalTo(before.withAdded(contact)));
  }


  @Test
  public void testContactCreationWithPhotoAndGroup() {
    app.goTo().homePage();
    Contacts before = app.db().contacts();
    File photo = new File("src/test/resources/portret.jpg");
    ContactData newContactData = new ContactData("Pamella", "Andersen", "Corporation", "", "", "89567845736", "+7(913) 098 54-54", "").withPhoto(photo);
    app.contact().create(newContactData);
    assertThat(app.contact().count(), equalTo(before.size() + 1));
    Contacts after = app.db().contacts();
    int newElementId = after.stream().mapToInt(ContactData::getId).max().getAsInt();
    newContactData.setId(newElementId);
    assertThat(after, equalTo(before.withAdded(newContactData)));
  }

  @Test (enabled = false) //вспомогательный тест - текущей директории, и что необходимый файл находится по заданному пути
  public void testCurrentDir() {
    File currentDir = new File(".");
    System.out.println(currentDir.getAbsolutePath());
    File photo = new File("src/test/resources/portret.jpg");
    System.out.println(photo.getAbsolutePath());
    System.out.println(photo.exists());
  }

}
